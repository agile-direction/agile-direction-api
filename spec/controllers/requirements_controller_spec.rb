require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe RequirementsController, type: :controller do

  before(:each) do
    @mission = Mission.create!({ name: Faker::Name.name })
    @deliverable = @mission.deliverables.create!(name: Faker::Name.name)
  end

  let(:valid_attributes) {
    { name: Faker::Name.name, deliverable_id: @deliverable.id }
  }

  let(:invalid_attributes) {
    { name: nil }
  }

  let(:valid_session) { {} }

  describe "GET #new" do
    it "assigns a new requirement as @requirement" do
      get :new, {mission_id: @mission.id, deliverable_id: @deliverable.id }, valid_session
      expect(assigns(:requirement)).to be_a_new(Requirement)
    end
  end

  describe "GET #edit" do
    it "assigns the requested requirement as @requirement" do
      requirement = Requirement.create! valid_attributes
      get :edit, {mission_id: @mission.id, deliverable_id: @deliverable.id, id: requirement.to_param}, valid_session
      expect(assigns(:requirement)).to eq(requirement)
    end
  end

  describe "POST #create" do
    context "with valid params" do
      it "creates a new Requirement" do
        expect {
          post :create, {mission_id: @mission.id, deliverable_id: @deliverable.id, :requirement => valid_attributes}, valid_session
        }.to change(Requirement, :count).by(1)
      end

      it "assigns a newly created requirement as @requirement" do
        post :create, {mission_id: @mission.id, deliverable_id: @deliverable.id, :requirement => valid_attributes}, valid_session
        expect(assigns(:requirement)).to be_a(Requirement)
        expect(assigns(:requirement)).to be_persisted
      end

      it "redirects to deliverable" do
        post :create, {mission_id: @mission.id, deliverable_id: @deliverable.id, :requirement => valid_attributes}, valid_session
        expect(response).to redirect_to(mission_path(@mission))
      end
    end

    context "with invalid params" do
      it "assigns a newly created but unsaved requirement as @requirement" do
        post :create, {mission_id: @mission.id, deliverable_id: @deliverable.id,:requirement => invalid_attributes}, valid_session
        expect(assigns(:requirement)).to be_a_new(Requirement)
      end

      it "re-renders the 'new' template" do
        post :create, {mission_id: @mission.id, deliverable_id: @deliverable.id, :requirement => invalid_attributes}, valid_session
        expect(response).to render_template("new")
      end
    end
  end

  describe "PUT #update" do
    context "with valid params" do
      let(:new_attributes) {
        {name: Faker::Name.name}
      }

      it "updates the requested requirement" do
        requirement = Requirement.create! valid_attributes
        put :update, {mission_id: @mission.id, deliverable_id: @deliverable.id, id: requirement.to_param, :requirement => new_attributes}, valid_session
        requirement.reload
      end

      it "assigns the requested requirement as @requirement" do
        requirement = Requirement.create! valid_attributes
        put :update, {mission_id: @mission.id, deliverable_id: @deliverable.id, id:requirement.to_param, :requirement => valid_attributes}, valid_session
        expect(assigns(:requirement)).to eq(requirement)
      end

      it "redirects to the deliverable" do
        requirement = Requirement.create! valid_attributes
        put :update, {mission_id: @mission.id, deliverable_id: @deliverable.id, id: requirement.to_param, :requirement => valid_attributes}, valid_session
        expect(response).to redirect_to(mission_path(@mission))
      end
    end

    context "with invalid params" do
      it "assigns the requirement as @requirement" do
        requirement = Requirement.create! valid_attributes
        put :update, {mission_id: @mission.id, deliverable_id: @deliverable.id,:id => requirement.to_param, :requirement => invalid_attributes}, valid_session
        expect(assigns(:requirement)).to eq(requirement)
      end

      it "re-renders the 'edit' template" do
        requirement = Requirement.create! valid_attributes
        put :update, {mission_id: @mission.id, deliverable_id: @deliverable.id,:id => requirement.to_param, :requirement => invalid_attributes}, valid_session
        expect(response).to render_template("edit")
      end
    end
  end

  describe "DELETE #destroy" do
    it "destroys the requested requirement" do
      requirement = Requirement.create! valid_attributes
      expect {
        delete :destroy, {mission_id: @mission.id, deliverable_id: @deliverable.id, id: requirement.to_param}, valid_session
      }.to change(Requirement, :count).by(-1)
    end

    it "redirects to the requirements list" do
      requirement = Requirement.create! valid_attributes
      delete :destroy, {mission_id: @mission.id, deliverable_id: @deliverable.id, id: requirement.to_param}, valid_session
      expect(response).to redirect_to(mission_deliverable_path(@mission, @deliverable))
    end
  end

  describe "Put #start" do
    it "starts the requested requirement" do
      requirement = Requirement.create! valid_attributes
      expect(requirement.status).to eq("created")
      put :start,{mission_id: @mission.id, deliverable_id: @deliverable.id,:id => requirement.to_param}, valid_session
      expect(requirement.reload.status).to eq("started")
    end
  end

  describe "Put #finish" do
    it "completes the requested requirement" do
      requirement = Requirement.create! valid_attributes.merge!( status: "started")
      expect(requirement.status).to eq("started")
      put :finish,{mission_id: @mission.id, deliverable_id: @deliverable.id,:id => requirement.to_param}, valid_session
      expect(requirement.reload.status).to eq("completed")
    end
  end

end
