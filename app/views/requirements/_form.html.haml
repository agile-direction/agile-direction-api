- url = @requirement.new_record? ? mission_deliverable_requirements_path(@requirement.mission, @requirement.deliverable, { action: :create }) : mission_deliverable_requirement_path(@requirement.mission, @requirement.deliverable, @requirement)
= form_for(@requirement, { url: url }) do |f|
  - if @requirement.errors.any?
    #error_explanation
      %h2= "#{pluralize(@requirement.errors.count, "error")} prohibited this requirement from being saved:"
      %ul
        - @requirement.errors.full_messages.each do |msg|
          %li= msg

  .fill-me-in
    = f.label(:name)
    = f.text_field(:name, { required: true, autofocus: true })

  .fill-me-in
    = f.label(:description)
    = f.text_field(:description)

  .fill-me-in
    = f.label(:status)
    = f.select(:status, options_for_select(Requirement.statuses, selected: Requirement.statuses[@requirement.status] ))

  .fill-me-in
    - # i18n-tasks-use t('activerecord.attributes.requirement.estimate')
    = f.label(:estimate)
    - value_or_default = @requirement.new_record? ? 1 : @requirement.estimate
    = f.number_field(:estimate, { value: value_or_default, step: 1 })

  .actions
    = f.submit 'Save'

  - unless @requirement.new_record?
    %h3 Danger Zone
    - delete_path = mission_deliverable_requirement_path(@requirement.mission, @requirement.deliverable, @requirement)
    - options = { class: "colors action alternative delete", method: :delete, data: { confirm: t("flashes.destroy.are-you-sure") } }
    = link_to(t("actions.delete"), delete_path, options)
